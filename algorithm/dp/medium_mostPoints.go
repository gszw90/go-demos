package dp

/*
 * @desc: 给你一个下标从 0 开始的二维整数数组 questions ，其中 questions[i] = [pointsi, brainpoweri] 。
 *       这个数组表示一场考试里的一系列题目，你需要 按顺序 （也就是从问题 0 开始依次解决），
 *       针对每个问题选择 解决 或者 跳过 操作。解决问题 i 将让你 获得  pointsi 的分数，
 *       但是你将无法解决接下来的brainpoweri个问题（即只能跳过接下来的 brainpoweri 个问题）。
 *       如果你跳过问题 i ，你可以对下一个问题决定使用哪种操作。
 *       比方说，给你 questions = [[3, 2], [4, 3], [4, 4], [2, 5]] ：
 *       如果问题 0 被解决了， 那么你可以获得 3 分，但你不能解决问题 1 和 2 。
 *       如果你跳过问题 0 ，且解决问题 1 ，你将获得 4 分但是不能解决问题 2 和 3 。
 *       请你返回这场考试里你能获得的 最高 分数。
 * @example1: 输入：questions = [[3,2],[4,3],[4,4],[2,5]]
 *            输出：5
 *            解释：解决问题 0 和 3 得到最高分。
 *            - 解决问题 0 ：获得 3 分，但接下来 2 个问题都不能解决。
 *            - 不能解决问题 1 和 2
 *            - 解决问题 3 ：获得 2 分
 *            总得分为：3 + 2 = 5 。没有别的办法获得 5 分或者多于 5 分。
 * @example2: 输入：questions = [[1,1],[2,2],[3,3],[4,4],[5,5]]
 *            输出：7
 *            解释：解决问题 1 和 4 得到最高分。
 *            - 跳过问题 0
 *            - 解决问题 1 ：获得 2 分，但接下来 2 个问题都不能解决。
 *            - 不能解决问题 2 和 3
 *            - 解决问题 4 ：获得 5 分
 *            总得分为：2 + 5 = 7 。没有别的办法获得 7 分或者多于 7 分。
 * @note: 1 <= questions.length <= 105
 *        questions[i].length == 2
 *        1 <= pointsi, brainpoweri <= 105
 * @solution: 我们用 dp[i] 来表示解决第 i 道题目及以后的题目可以获得的最高分数。
 *            同时，我们从后往前遍历题目，并更新 dp 数组。
 *
 */

func mostPoints(questions [][]int) int64 {
	l := len(questions)
	dp := make([]int64, l+1)
	for i := l - 1; i >= 0; i-- {
		// 如果跳过第 i 道题目，那么最高分数就是 dp[i+1]
		// 如果解决第 i 道题目，那么最高分数就是 questions[i][0] + dp[i+questions[i][1]+1]
		// 同时注意 i+questions[i][1]+1 可能超出数组范围，需要判断
		// 取两者的最大值
		dp[i] = max(dp[i+1], int64(questions[i][0])+dp[min(l, i+questions[i][1]+1)])
	}
	return dp[0]
}
