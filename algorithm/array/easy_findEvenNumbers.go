package array

// 2094. 找出 3 位偶数
// 给你一个整数数组 digits ，其中每个元素是一个数字（0 - 9）。数组中可能存在重复元素。
//
// 你需要找出 所有 满足下述条件且 互不相同 的整数：
//
// 该整数由 digits 中的三个元素按 任意 顺序 依次连接 组成。
// 该整数不含 前导零
// 该整数是一个 偶数
// 例如，给定的 digits 是 [1, 2, 3] ，整数 132 和 312 满足上面列出的全部条件。
//
// 将找出的所有互不相同的整数按 递增 顺序排列，并以数组形式返回。
//
// 示例 1：
//
// 输入：digits = [2,1,3,0]
// 输出：[102,120,130,132,210,230,302,310,312,320]
// 解释：
// 所有满足题目条件的整数都在输出数组中列出。
// 注意，答案数组中不含有 奇数 或带 前导零 的整数。
// 示例 2：
//
// 输入：digits = [2,2,8,8,2]
// 输出：[222,228,282,288,822,828,882]
// 解释：
// 同样的数字（0 - 9）在构造整数时可以重复多次，重复次数最多与其在 digits 中出现的次数一样。

func findEvenNumbers(digits []int) []int {
	// 思路：
	// 百位上不能为0
	// 十位上可以为任意数
	// 个位上必须是偶数

	res := make([]int, 0)
	l := len(digits)
	if l < 3 {
		return res
	}
	// 记录每个数字出现的次数
	cnt := make([]int, 10)
	for _, num := range digits {
		cnt[num]++
	}
	// i为0表示百位，i为1表示十位，i为2表示个位
	var dfs func(i int, num int)
	dfs = func(i int, num int) {
		if i == 3 {
			res = append(res, num)
			return
		}
		for k, v := range cnt {
			// k对应的数字的数量大于0
			// 百位不为0
			// 十位可以为任意数
			// 个位必须是偶数
			if v > 0 && ((i == 0 && k != 0) || (i == 1) || (i == 2 && k%2 == 0)) {
				cnt[k]--
				dfs(i+1, num*10+k)
				// 回溯
				cnt[k]++
			}
		}
	}
	dfs(0, 0)
	return res
}
