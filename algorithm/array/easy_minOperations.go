package array

// 3375. 使数组的值全部为 K 的最少操作次数
// 如果一个数组中所有 严格大于 h 的整数值都 相等 ，那么我们称整数 h 是 合法的 。
//
// 比方说，如果 nums = [10, 8, 10, 8] ，那么 h = 9 是一个 合法 整数，因为所有满足 nums[i] > 9 的数都等于 10 ，但是 5 不是 合法 整数。
//
// 给你一个整数数组 nums ，你需要对 nums 进行修改，将其中的 严格大于 h 的整数值 全部 修改为 k 。
//
// 请你返回 最少 需要修改的次数。
//
// 示例 1：
// 输入：nums = [10, 8, 10, 8], k = 5
// 输出：2
// 解释：我们可以将 nums[0] 和 nums[2] 修改为 5 ，使得 nums = [5, 8, 5, 8] 。
// 现在，所有严格大于 5 的整数值都等于 8 ，所以 5 是一个合法整数。
// 我们可以证明 2 是最少需要修改的次数。
//
// 示例 2：
// 输入：nums = [10, 8, 10, 8], k = 7
// 输出：1
// 解释：我们可以将 nums[1] 修改为 7 ，使得 nums = [10, 7, 10, 8] 。
// 现在，所有严格大于 7 的整数值都等于 8 ，所以 7 是一个合法整数。
// 我们可以证明 1 是最少需要修改的次数。
//
// 提示：
// 1 <= nums.length <= 105
// 1 <= nums[i], k <= 106

func miniOperations(nums []int, k int) int {
	// 如果nums中存在小于k的数，那么k是不合法的，返回-1
	// 最终的结果为nums中大于k的元素个数
	m := make(map[int]struct{})
	for _, num := range nums {
		if num < k {
			return -1
		}
		if num > k {
			m[num] = struct{}{}
		}
	}
	return len(m)
}
