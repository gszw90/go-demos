package array

// 3396. 使数组元素互不相同所需的最少操作次数
// 给你一个整数数组 nums，你需要确保数组中的元素 互不相同 。为此，你可以执行以下操作任意次：
//
// 从数组的开头移除 3 个元素。如果数组中元素少于 3 个，则移除所有剩余元素。
// 注意：空数组也视作为数组元素互不相同。返回使数组元素互不相同所需的 最少操作次数 。
//
// 示例 1：
// 输入：nums = [1,2,3,4,2,3,3,5,7]
// 输出： 2
// 解释：执行以下操作：
// - 移除 nums[0]、nums[1] 和 nums[2] 。nums 变为 [4,2,3,3,5,7] 。
// - 移除 nums[0]、nums[1] 和 nums[2] 。nums 变为 [3,5,7] 。
// 至少需要 2 次操作。
//
// 示例 2：
// 输入：nums = [4,5,6,4,4]
// 输出： 2
// 解释：执行以下操作：
// - 移除 nums[0]、nums[1] 和 nums[2] 。nums 变为 [4,4] 。
// - 移除 nums[0]、nums[1] 和 nums[2] 。nums 变为 [] 。
// 至少需要 2 次操作。
//
// 示例 3：
// 输入：nums = [6,7,8,9]
// 输出： 0
// 解释：nums 中的元素互不相同，因此不需要执行操作。

// 思路：从末尾开始遍历，找到第一个重复的元素，然后计算截取到该元素需要操作的次数

func minimumOperations(nums []int) int {
	m := make(map[int]struct{})
	for i := len(nums) - 1; i >= 0; i-- {
		if _, ok := m[nums[i]]; ok {
			return i/3 + 1
		}
		m[nums[i]] = struct{}{}
	}
	return 0
}
